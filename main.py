import os
import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import StatesGroup, State
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from models import Session, User, init_db
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ dotenv —Ñ–∞–π–ª–∞
load_dotenv()

BOT_TOKEN = os.getenv('TOKEN')                  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º
YOUR_APPID = os.getenv('YOUR_APPID')            # –¢–æ–∫–µ–Ω API –ø–æ–≥–æ–¥—ã —Å–∞–π—Ç https://openweathermap.org
API_KEY = os.getenv("API_KEY")                  # –¢–æ–∫–µ–Ω API –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç —Å–∞–π—Ç https://app.currencyapi.com/
bot = Bot(token=BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ë–î
init_db()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot, storage=MemoryStorage())


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    CHOOSING = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
    GUESS_CITY = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    CONVERT_CURRENCY = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(Command('start'))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    with Session() as session:
        user = User(telegram_id=telegram_id,
                    first_name=first_name,
                    last_name=last_name,
                    username=username)
        # init_db()
        session.add(user)
        print(user.username)
        session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! \n–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="/start"),
                    types.KeyboardButton(text="‚òÄÔ∏è –ü–æ–≥–æ–¥–∞"),
                    types.KeyboardButton(text="üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
                ],
                [
                    types.KeyboardButton(text="üêà –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏"),
                    types.KeyboardButton(text="üìä –û–ø—Ä–æ—Å"),
                    types.KeyboardButton(text="üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä")
                ]
            ]
        )
    )
    if message == "üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä":
        await message.answer("–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é:")
        await UserState.CHOOSING.set()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserState.CHOOSING.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
@dp.message_handler(state=UserState.CHOOSING)
async def choice(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
    if message.text == "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
        await message.reply("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GUESS_CITY, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await UserState.GUESS_CITY.set()

    elif message.text == "üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É,–≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º "
                            "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '100 USD RUB'):")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CONVERT_CURRENCY, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await UserState.CONVERT_CURRENCY.set()

    elif message.text == "üêà –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∏–ª—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
        response = requests.get('https://api.thecatapi.com/v1/images/search')
        cat_url = response.json()[0]['url']
        await bot.send_photo(chat_id=message.chat.id, photo=cat_url, caption='–ö–æ—Ç–∏–∫ –¥–ª—è –≤–∞—Å ‚ù§Ô∏è')
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:')
    elif message.text == "üìä –û–ø—Ä–æ—Å":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É
        telegram_id = message.from_id
        await bot.send_poll(
            chat_id=telegram_id,
            question="–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?",
            options=["–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π", "–ñ–µ–ª—Ç—ã–π"]
        )
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:')
    elif message.text == "üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä":
        await message.answer("–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é:")
        await state.reset_state(with_data=False) and UserState.CHOOSING.set()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHOOSING
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
@dp.message_handler(state=UserState.GUESS_CITY)
async def guess_city(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    city = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not city:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥.")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={YOUR_APPID}&units=metric"
    response = requests.get(url)
    data = response.json()

    if data and 'main' in data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        temperature = data['main']['temp']
        feels_like = data['main']['feels_like']
        description = data['weather'][0]['description']

        message_text = f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.1f}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        await message.reply(message_text)

        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è GUESS_CITY –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:')
        await UserState.CHOOSING.set()
    elif message.text == "üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä":
        await message.answer("–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é:")
        await state.reset_state(with_data=False) and UserState.CHOOSING.set()

    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GUESS_CITY
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É
@dp.message_handler(state=UserState.CONVERT_CURRENCY)
async def convert_currency(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    if not text:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã.")
        return
    elif message.text == "üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä":
        await message.answer("–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é:")
        await state.reset_state(with_data=False) and UserState.CHOOSING.set()
        return
    data = text.split()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(data) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    amount = None
    try:
        amount = float(data[0])
    except ValueError:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –≤–∞–ª—é—Ç—ã
    currency_from = data[1].upper()
    currency_to = data[2].upper()
    url = f'http://api.currencyapi.com/v3/latest?apikey={API_KEY}&currencies{currency_to}&base_currency={currency_from}'
    response = requests.get(url)
    data = response.json()

    if data is not None:
        rate = data['data'][currency_to]['value']
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
        result = round(amount * rate, 2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = f"{amount} {currency_from} = {result} {currency_to}"
        await message.reply(message_text)

        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è CONVERT_CURRENCY –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:')
        await UserState.CHOOSING.set()

    else:
        if not data or 'error' in data:
            error_message = data['error']
        else:
            error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã {currency_from}."
        await message.reply(f"{error_message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == '__main__':
    executor.start_polling(dp)
